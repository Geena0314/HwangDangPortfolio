<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="orderMapper">
	<sql id="orders-join">
		o.orders_no, o.orders_receiver, o.orders_phone, o.orders_zipcode, o.orders_address, o.orders_sub_address,
		o.orders_total_price, o.orders_payment, o.orders_request, o.payment_status,  o.orders_date , o.member_id
	</sql>
	
	<sql id="product-join">
		p.product_Id, p.product_name, p.product_price, p.product_stock, p.product_main_image, 
		p.product_info, p.product_like, p.seller_store_no
	</sql>
	
	<sql id="orderProduct-join">
		op.order_seq_no, op.order_amount, op.orders_no as op_orders_no, op.product_id as op_product_id, op.option_id, 
		op.seller_store_no as op_seller_store_no, op.order_product_status
	</sql>
	
	<sql id="order-join-column">
		order_seq_no, order_amount, op_orders_no, op_product_id, option_id, op_seller_store_no, order_product_status,
		orders_no, orders_receiver, orders_phone, orders_zipcode, orders_address, orders_sub_address,
		orders_total_price, orders_payment, orders_request, payment_status, member_id,
		product_Id, product_name, product_price, product_stock, product_main_image, 
		product_info, product_like, seller_store_no
	</sql>
	
	<sql id="orders-join-column" >
		orders_no, payment_status, orders_date,
		order_seq_no, order_amount, order_product_status, 
		product_id, product_name, product_price, product_main_image,
		seller_store_no, seller_store_name, seller_store_image,
		option_sub_name, option_add_price
	</sql>
	
	<!-- 주문 기본 리절트맵 -->
	<resultMap type="orders" id="orders-basic-resultmap">
		<id column="orders_no" property="ordersNo"/>
		<result column="orders_receiver" property="ordersReceiver"/>
		<result column="orders_phone" property="ordersPhone"/>
		<result column="orders_zipcode" property="ordersZipcode"/>
		<result column="orders_address" property="ordersAddress"/>
		<result column="orders_sub_address" property="ordersSubAddress"/>
		<result column="orders_total_price" property="ordersTotalPrice"/>
		<result column="orders_payment" property="ordersPayment"/>
		<result column="orders_request" property="ordersRequest"/>
		<result column="payment_status" property="paymentStatus"/>
		<result column="member_id" property="memberId"/>
		<result column="orders_date"  property="ordersDate"/>
	</resultMap>
	
	<!-- 주문상품 리절트맵. -->
	<resultMap type="orderProduct" id="orderProduct-basic-resultmap">
		<id column="order_seq_no" property="orderSeqNo"/>
		<result column="order_amount" property="orderAmount"/>
		<result column="orders_no" property="ordersNo"/>
		<result column="product_id" property="productId"/>
		<result column="option_id" property="optionId"/>
		<result column="seller_store_no" property="sellerStoreNo"/>
		<result column="order_product_status" property="orderProductStatus"/>
	</resultMap>
	
	<!-- 주문상품 + 상품정보. (1:1)-->
	<resultMap type="orderProduct" id="orderProduct-product" extends="orderProduct-basic-resultmap">
		<association property="product" javaType="Product" resultMap="productMapper.product-basic-resultMap"/>
	</resultMap>
	
	<!-- 주문상품 + 상품옵션. (1:1)-->
	<resultMap type="orderProduct" id="orderProduct-productOption" extends="orderProduct-basic-resultmap">
		<association property="productOption" javaType="ProductOption" resultMap="productMapper.productOption-basic-resultMap"/>
	</resultMap>
		
	<!-- 주문, 상품 ,주문상품 Join -->
	<resultMap type="orders" id="orders-product-orderProduct" extends="orders-basic-resultmap">
		<collection property="orderProductList" ofType="orderProduct" resultMap="orderProduct-product"/>
	</resultMap>
	
	<!-- 환불정보 resultMap -->
	<resultMap type="refundRequest" id="refund-basic-resultmap">
		<result column="refund_title" property="refundTitle"/>
		<result column="refund_content" property="refundContent"/>
		<result column="order_seq_no" property="orderSeqNo"/>
	</resultMap>
	
	<!-- 교환정보 resultMap -->
	<resultMap type="exchangeRequest" id="exchange-basic-resultmap">
		<result column="exchange_title" property="exchangeTitle"/>
		<result column="exchange_content" property="exchangeContent"/>
		<result column="order_seq_no" property="orderSeqNo"/>
		<result column="exchange_stock" property="exchangeStock"/>
		<result column="option_id" property="optionId"/>
		<result column="exchange_charge" property="exchangeCharge"/>
	</resultMap>
	
	<!-- 주문상품 + 상품정보. (1:1)-->
	<resultMap type="orderProduct" id="dilivery-resultMap" extends="orderProduct-basic-resultmap">
		<association property="orders" javaType="Orders" resultMap="orders-basic-resultmap"/>
		<association property="product" javaType="Product" resultMap="productMapper.product-basic-resultMap"/>
		<association property="productOption" javaType="ProductOption" resultMap="productMapper.productOption-basic-resultMap"/>
		<association property="seller" javaType="Seller" resultMap="sellerMapper.seller-basic-resultmap"/>
	</resultMap>
	
	<!-- 주문, 주문상품 Join -->
	<resultMap type="orders" id="orders-orderProduct" extends="orders-basic-resultmap">
		<collection property="orderProductList" ofType="orderProduct" resultMap="dilivery-resultMap"/>
	</resultMap>
	
	<!-- 주문, 상품, 주문상품 Join  -->
	<select id="selectOrderState" parameterType="map"  resultMap="orders-product-orderProduct">
		select 	<include refid="order-join-column"/>
		from		(select ceil(rownum/#{itemPerPage}) page, <include refid="order-join-column"/>
					from (select 	<include refid="orderProduct-join"/>,<include refid="orders-join"/>, <include refid="product-join"/>
							from 		orders o, order_product op, product p
							where 	o.orders_no = op.orders_no
							and	 	op.product_id = p.product_id
							and		op.seller_store_no = #{sellerStoreNo} order by op.orders_no desc))
		where		page = #{page}
	</select>
	
	<!-- 주문상품갯수조회. -->
	<select id="selectOrderCount" parameterType="_int" resultType="_int">
		select 	count(op.orders_no)
		from 		order_product op, orders o, product p 
		where		op.orders_no = o.orders_no
		and		op.product_id = p.product_id
		and		op.seller_store_no = #{sellerStoreNo}
	</select>
	
	<!-- 주문정보 조회.(주문 번호로) -->
	<select id="selectOrderInfo" parameterType="string" resultMap="orders-basic-resultmap">
		select <include refid="orders-join"/> from orders o where o.orders_no = #{ordersNo}
	</select>
	
	<!-- 환불정보 조회.(주문상품 번호로) -->
	<select id="selectRefundByNo" parameterType="_int" resultMap="refund-basic-resultmap">
		select refund_title, refund_content, order_seq_no from refund_request where order_seq_no = #{orderSeqNo}
	</select>
	
	<!-- 환불 승인 처리. -->
	<!-- 주문상품 주문현황 변경.(환불승인처리 9번) -->
	<update id="updateOrderProductStatus" parameterType="_int">
		update 	order_product
		set		order_product_status = 9
		where 	order_seq_no = #{orderSeqNo}
	</update>
	
	<!-- 주문상품 번호로 옵션 id, 구매상품수량 조회. -->
	<select id="selectOptionAmount" parameterType="_int" resultType="map">
		select 	option_id, order_amount
		from 		order_product
		where		order_seq_no = #{orderSeqNo}
	</select>
	
	<!-- 취소/반품된 수량만큼 옵션의 재고량 증가. -->
	<update id="updateOptionStock" parameterType="map">
		update 	product_option
		set			option_stock = option_stock+#{ORDER_AMOUNT}
		where		option_id = #{OPTION_ID}
	</update>
	<!-- 여기까지 -->
	
	<!-- 환불요청 정보저장. -->
	<insert id="insertRefundRequest" parameterType="refundRequest">
		insert into refund_request values (#{refundTitle}, #{refundContent}, #{orderSeqNo})
	</insert>
	
	<!-- 환불 신청 처리. -->
	<!-- 주문상품 주문현황 변경.(환불신청상태 6번) -->
	<update id="updateOrderProductRefundStatus" parameterType="_int">
		update 	order_product
		set			order_product_status = 6
		where 	order_seq_no = #{orderSeqNo}
	</update>
	
	<!-- 교환정보 조회.(주문상품 번호로) -->
	<select id="selectExchangeByNo" parameterType="_int" resultMap="exchange-basic-resultmap">
		select		exchange_title, exchange_content, order_seq_no, exchange_stock, option_id, exchange_charge
		from		exchange_request
		where	order_seq_no = #{orderSeqNo}
	</select>
	
	<!-- 교환신청로직 -->
	<!-- orderSeqNo로 order_product 와  product_option 조회. -->
	<select id="orderProductProductOption" resultMap="orderProduct-productOption" parameterType="_int">
		select			op.order_seq_no, op.order_amount, op.product_id, op.option_id, 
						op.seller_store_no, po.option_sub_name, po.option_add_price
		from			order_product op, product_option po
		where		op.option_id = po.option_id
		and			op.order_seq_no = #{orderSeqNo}
	</select>

	<!-- 주문상품, 상품 Join -->
	<select id="selectOrderProductAndProduct" parameterType="_int" resultMap="orderProduct-product">
		select 	op.order_amount, p.product_price
		from 		order_product op, product p
		where		op.product_id = p.product_id
		and		op.order_seq_no = #{orderSeqNo}
	</select>

	<!-- 교환신청 처리  -->
	<insert id="insertRequestExchange"  parameterType="exchangeRequest">
		INSERT INTO  exchange_request
		VALUES ( #{exchangeTitle}, #{exchangeContent}, #{orderSeqNo}, #{exchangeStock}, #{optionId}, #{exchangeCharge})
	</insert>
	
	<!-- 주문상품 주문현황 변경.(교환신청상태 5번) -->
	<update id="updateOrderProductExchangeStatus" parameterType="_int">
		update 	order_product
		set			order_product_status = 5
		where 	order_seq_no = #{orderSeqNo}
	</update>
	
	<!-- 옵션id로 옵션조회 -->
	<select id="selectOptionByOptionId" parameterType="_int" resultMap="productMapper.productOption-basic-resultMap">
		select		option_id, option_name, option_sub_name, option_stock, option_add_price, product_id
		from		product_option
		where		option_id = #{optionId}
	</select>
	
	<!-- 교환 신청 삭제(거절) -->
	<delete id="deleteExchangeRequest" parameterType="_int">
		delete from exchange_request where order_seq_no = #{orderSeqNo}
	</delete>
	
	<!-- 주문상품 주문현황 변경.(교환거부처리 11번) -->
	<update id="updateOrderProductStatus11" parameterType="_int">
		update 	order_product
		set			order_product_status = 11
		where 	order_seq_no = #{orderSeqNo}
	</update>
	
	<!-- 교환 승인 처리 -->
	<!-- 주문상품 주문현황 변경.(교환승인처리 8번) -->
	<update id="updateOrderProductStatus8" parameterType="_int">
		update 	order_product
		set			order_product_status = 8
		where 	order_seq_no = #{orderSeqNo}
	</update>
	
	<!-- 기존 옵션 재고량 더해주기. -->
	<update id="updatePlusOptionStock" parameterType="map">
		update 	product_option
		set		option_stock = option_stock+#{originalStock}
		where		option_id = #{originalOptionId}
	</update>
	
	<!-- 바꿀 옵션 재고량 빼주기. -->
	<update id="updateMinusOptionStock" parameterType="map">
		update 	product_option
		set		option_stock = option_stock-#{exchangeStock}
		where		option_id = #{exchangeOptionId}
	</update>
	
	<!-- 주문, 주문상품 Join(memberId찾기) -->
	<select id="selectOrdersOrderProduct" parameterType="_int" resultMap="orders-product-orderProduct">
		select 	o.member_id
		from 		order_product op, orders o
		where		op.orders_no = o.orders_no
		and		op.order_seq_no = #{orderSeqNo}
	</select>
	
	<!-- ************나의 주문 관련************ -->
	<!-- 배송 현황 조회 -->
	<select id="selectDiliveryStatus" resultMap="dilivery-resultMap" parameterType="map">
		select	<include refid="orders-join-column"/> from(
			select ceil(rownum/#{itemsPerPage}) page, <include refid="orders-join-column"/> from(
				select 		o.orders_no, o.payment_status, o.orders_date,
							op.order_seq_no, op.order_amount, op.order_product_status, 
							p.product_Id, p.product_name, p.product_price, p.product_main_image,
							s.seller_store_no, s.seller_store_name, s.seller_store_image,
							po.option_sub_name, po.option_add_price
				from 		orders o, order_product op, product p, seller s, product_option po
				where 		o.orders_no = op.orders_no
				and	 		op.product_id = p.product_id
				and			op.option_id = po.option_id
				and			op.seller_store_no = s.seller_store_no 
				and			op.order_product_status IN (0,1,2,3,4) 
				and			o.member_id = #{memberId}
				order by	o.orders_date desc))
		where page = #{page}
	</select>
	
	<!-- 주문 총 갯수 조회 -->
	<select id="selectCountOrderProduct" resultType="_int" parameterType="string">
		select  count(op.order_seq_no) from orders o, order_product op 
		where  	o.orders_no = op.orders_no
		and 	o.member_id = #{value}
	</select>
	
	<!-- 교환/환불/취소 현황 조회 -->
	<select id="selectRequestStatus" resultMap="dilivery-resultMap" parameterType="map">
		select	<include refid="orders-join-column"/> from(
			select ceil(rownum/#{itemsPerPage}) page, <include refid="orders-join-column"/> from(
				select 		o.orders_no, o.payment_status, o.orders_date,
							op.order_seq_no, op.order_amount, op.order_product_status, 
							p.product_Id, p.product_name, p.product_price, p.product_main_image,
							s.seller_store_no, s.seller_store_name, s.seller_store_image,
							po.option_sub_name, po.option_add_price
				from 		orders o, order_product op, product p, seller s, product_option po
				where 		o.orders_no = op.orders_no
				and	 		op.product_id = p.product_id
				and			op.option_id = po.option_id
				and			op.seller_store_no = s.seller_store_no 
				and			op.order_product_status IN (5,6,7,8,9,11) 
				and			o.member_id = #{memberId}
				order by	o.orders_date desc))
		where page = #{page}
	</select>
	
	<!-- 교환/환불/취소 상품 총 갯수 조회 -->
	<select id="selectCountRequestOrderProduct" resultType="_int" parameterType="string">
		select  count(op.order_seq_no) from orders o, order_product op 
		where  	o.orders_no = op.orders_no
		and		op.order_product_status IN (5,6,7,8,9,11)
		and 	o.member_id = #{value}
	</select>
	
	<!-- 구매확정 상품 조회 -->
	<select id="selectPurchaseConfirm" resultMap="dilivery-resultMap" parameterType="map">
		select	<include refid="orders-join-column"/> from(
			select ceil(rownum/#{itemsPerPage}) page, <include refid="orders-join-column"/> from(
				select 		o.orders_no, o.payment_status, o.orders_date,
							op.order_seq_no, op.order_amount, op.order_product_status, 
							p.product_Id, p.product_name, p.product_price, p.product_main_image,
							s.seller_store_no, s.seller_store_name, s.seller_store_image,
							po.option_sub_name, po.option_add_price
				from 		orders o, order_product op, product p, seller s, product_option po
				where 		o.orders_no = op.orders_no
				and	 		op.product_id = p.product_id
				and			op.option_id = po.option_id
				and			op.seller_store_no = s.seller_store_no 
				and			op.order_product_status = 10
				and			o.member_id = #{memberId}
				order by	o.orders_date desc))
		where page = #{page}
	</select>
	
	<!-- 구매확정 상품 총 갯수 조회 -->
	<select id="selectCountPurchaseConfirm" resultType="_int" parameterType="string">
		select  count(op.order_seq_no) from orders o, order_product op 
		where  	o.orders_no = op.orders_no
		and		op.order_product_status = 10
		and 	o.member_id = #{value}
	</select>
	
	<!-- 구매 취소 시 현황 변경 -->
	<update id="updateCancelOrderProductStatus" parameterType="_int">
		update 	order_product
		set		order_product_status = 7
		where	order_seq_no = #{value}
	</update>
	
	<!-- 구매 확정 시 현황 변경 -->
	<update id="updateConfirmOrderProductStatus" parameterType="_int">
		update 	order_product
		set		order_product_status = 10
		where	order_seq_no = #{value}
	</update>
	
	<!-- 주문상품 등록 -->
	<insert id="insertOrderProduct" parameterType="orderProduct">
		<selectKey keyProperty="orderSeqNo" resultType="_int" order="BEFORE">
			select order_seq_no_seq.nextval from dual
		</selectKey>
		INSERT INTO order_product
		VALUES (#{orderSeqNo}, #{orderAmount}, #{ordersNo}, #{productId}, #{optionId}, #{sellerStoreNo}, #{orderProductStatus})
	</insert>
	
	<!-- 주문정보 등록 -->
	<insert id="insertOrders" parameterType="orders">
		INSERT INTO orders 
		VALUES ( 
		 #{ordersNo },#{ordersReceiver },#{ordersPhone },#{ordersZipcode },
		 #{ordersAddress },#{ordersSubAddress },#{ordersTotalPrice },#{ordersPayment },
		 #{ordersRequest },#{paymentStatus },#{ordersDate },#{memberId }
		)
	</insert>
	
	<!-- 주문번호로 주문내역 검색 -->
	<select id="selectDiliveryStatusByOrderNo" resultMap="dilivery-resultMap" parameterType="string">
		select 		o.orders_no, o.payment_status, o.orders_date,
						op.order_seq_no, op.order_amount, op.order_product_status, 
						p.product_Id, p.product_name, p.product_price, p.product_main_image,
						s.seller_store_no, s.seller_store_name, s.seller_store_image,
						po.option_sub_name, po.option_add_price
		from 			orders o, order_product op, product p, seller s, product_option po
		where 		o.orders_no = op.orders_no
		and	 		op.product_id = p.product_id
		and			op.option_id = po.option_id
		and			op.seller_store_no = s.seller_store_no 
		and			o.orders_no = #{ordersNo}
	</select>
</mapper>